version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kronos-postgres
    environment:
      POSTGRES_DB: kronos_chat
      POSTGRES_USER: kronos_user
      POSTGRES_PASSWORD: kronos_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kronos_user -d kronos_chat"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # NestJS API Server
  api:
    build:
      context: .
      dockerfile: apps/server/Dockerfile
    container_name: kronos-api
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=kronos_user
      - DATABASE_PASSWORD=kronos_password
      - DATABASE_NAME=kronos_chat
      - DATABASE_LOGGING=false
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-here-change-in-production}
      - JWT_EXPIRES_IN=30m
      - PORT=3000
      - API_PREFIX=/api/v1
    ports:
      - "8000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # React Client
  client:
    build:
      context: ./apps/client
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8000/api/v1}
    container_name: kronos-client
    ports:
      - "3000:80"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: kronos-network
